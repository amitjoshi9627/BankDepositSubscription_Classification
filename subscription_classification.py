# -*- coding: utf-8 -*-
"""Subscription_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ZZJ2fV95GuELX0VTAj0Zp9VFIfFoE-2
"""

import pandas as pd
import numpy as np

test = pd.read_csv('bank-additional.csv',sep = ';')

test.head()

train =pd.read_csv('bank-additional-full.csv',sep = ';')

train.head()

train.columns

X = train.drop('y',axis = 1)
y = train['y']

X.info()

X.columns

cat_col = ['job', 'marital', 'education', 'default', 'housing', 'loan',
       'contact', 'month', 'day_of_week','poutcome']

len(cat_col)

X_test = test.drop('y',axis = 1)
y_test = test['y']

import sklearn.preprocessing as pre

le = pre.LabelEncoder()

X['marital'] = le.fit_transform(X['marital'])
X_test['marital'] = le.fit_transform(X_test['marital'])

for category in cat_col:
    
    encoder = pre.LabelEncoder()
    X[category] = encoder.fit_transform(X[category])
    X_test[category] = encoder.fit_transform(X_test[category])

X.head()

X['month'].unique()

X['day_of_week'].unique()

output_encoder = pre.LabelEncoder()

y = output_encoder.fit_transform(y)

y_test = output_encoder.fit_transform(y_test)

import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

plt.figure(figsize = (12,6))
sns.boxplot(x= 'marital',y = 'age',data = train)

plt.figure(figsize = (12,6))
sns.boxplot(x = 'housing',y ='age',data = train )

plt.figure(figsize = (12,6))
sns.boxplot(x = 'loan',y ='age',data = train )

plt.figure(figsize = (10,4))
sns.barplot(x = 'housing',y ='default',data = X)

from sklearn.svm import SVC

model = SVC()

model.fit(X,y)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

print(accuracy_score(y_test,y_pred,))

print(classification_report(y_test,y_pred))

print(confusion_matrix(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 50,verbose =1)

rfc.fit(X,y)

y_pred2 = rfc.predict(X_test)

print(accuracy_score(y_test,y_pred2))

print(confusion_matrix(y_test,y_pred2))

